<?php

// SETTINGS
const db_submission_table = 'word1_submissions';
const form_id = 3;

// GLOBAL FIELDS
$dbSubmissionType;
$dbSubmissionId;
$dbSubmissionDate;
$dbSubmissionOrganization;
$dbNumberParkingTickets;
$dbReductionCode;
$dbNotes;

$dbInvoiceFirstName;
$dbInvoiceLastName;
$dbInvoiceAdress;
$dbInvoiceZipcode;
$dbInvoiceCity;
$dbInvoiceEmail;
$dbInvoiceExtraInformation;
$dbInvoiceEventNr;
$dbInvoiceFollowNumber;
$dbInvoiceNumber;
$dbInvoiceDebiteurNr;
$dbInvoiceBookNr;
$dbInvoiceCostPost;
$dbInvoiceExpirationDays;
$dbInvoiceDescriptionText;

$dbInvoiceBtwType;
$dbInvoiceDescription;
$dbInvoiceRowDescription;
$dbExpirationDate;

$dbPricePartHigh;
$dbPricePartHighBtw;
$dbPricePartHighTotal;
$dbPricePartLowTotal;
$dbPricePartLow;
$dbPricePartLowBtw;

$dbParticipants;

// SETTINGS VARIABLES
$btw_high;
$btw_high_nr;
$btw_low;
$btw_low_nr;

/*
* Use the gravity hook to process the data to our own tables
*/
add_action('gform_entry_created', 'processGravityEntryData', 10, form_id);
function processGravityEntryData($entry, $form)
{
    processSettings();

    global $dbSubmissionType;
    if (form_id === 3) {
        // Check if the entry is already present in the database
        global $wpdb;
        $exists = $wpdb->get_var("SELECT COUNT(*) FROM " . db_submission_table . " WHERE submission_id = '" . $entry['id'] . "'");

        if ($exists > 1) {
            debug_to_console("Entry already exists");
            return;
        }

        debug_to_console("Adding new entry with id: " . $entry['id']);

        processSubmission($entry);
        if ($dbSubmissionType === 'geen') {
            return;
        }

        debug_to_console("Processing submission completed");

        processInvoiceNAWFields($entry);
        debug_to_console("Processing NAW completed");

        processParticipants($entry, $form);
        debug_to_console("Processing Participants completed");

        processInvoicePaymentFields($entry);
        debug_to_console("Processing Invoice Payment completed");

        processPaymentFields($entry);
        debug_to_console("Processing Payment completed");

        saveSubmission();
        debug_to_console("Saving entry completed");
    }
}

/*
 * Process functions
 */
function processSettings(){
    global $price_single_ticket;
    $price_single_ticket = 195;
    global $price_group_ticket;
    $price_group_ticket = 175;
    global $price_parking_ticket;
    $price_parking_ticket = 10;
    global $btw_low_nr;
    $btw_low_nr = '1';
    global $btw_low;
    $btw_low = 0.06;
    global $btw_high_nr;
    $btw_high_nr = '2';
    global $btw_high;
    $btw_high = 0.21;
    global $food_price;
    $food_price = 19.25;
    global $payment_detail_description_low_btw;
    $payment_detail_description_low_btw = 'Vertering Het Grootste Kennisfestival';
    global $payment_detail_description_high_btw;
    $payment_detail_description_high_btw = 'Deelname Het Grootste Kennisfestival';
    global $payment_detail_event_nr_low_btw;
    $payment_detail_event_nr_low_btw = '8030';
    global $payment_detail_event_nr_high_btw;
    $payment_detail_event_nr_high_btw = '8000';

    global $dbInvoiceExpirationDays;
    $dbInvoiceExpirationDays = 14;
    global $dbInvoiceDescriptionText;
    $dbInvoiceDescriptionText = "Wij verzoeken je vriendelijk dit bedrag binnen 14 dagen over te maken naar de Rabobank op rekeningnummer NL93RABO0300479743 ten name van Regio Academy BV onder vermelding van het factuurnummer. Mocht je vragen hebben naar aanleiding van deze factuur dan kan je een mail sturen naar administratie@regioacademy.nl. Dan nemen we zo snel mogelijk contact met je op.";

    global $wpdb;
    $settings = $wpdb->get_results("SELECT * FROM " . $wpdb->prefix . "submissions_settings where preset = 1");

    if($settings && $settings[0]) {
        $price_single_ticket = $settings[0]->ticket_price_single;
        $price_group_ticket = $settings[0]->ticket_price_group;
        $price_parking_ticket = $settings[0]->price_parkingticket;
        $btw_low_nr = $settings[0]->btw_low_number;
        $btw_low = $settings[0]->btw_low;
        $btw_high_nr = $settings[0]->btw_high_number;
        $btw_high = $settings[0]->btw_high;
        $food_price = $settings[0]->food_price;
        $payment_detail_description_low_btw = $settings[0]->payment_detail_description_low_btw;
        $payment_detail_description_high_btw = $settings[0]->payment_detail_description_high_btw;
        $payment_detail_event_nr_low_btw = $settings[0]->payment_detail_event_nr_low_btw;
        $payment_detail_event_nr_high_btw = $settings[0]->payment_detail_event_nr_high_btw;
        $dbInvoiceExpirationDays = $settings[0]->invoice_expiration_days;
        $dbInvoiceDescriptionText = $settings[0]->invoice_description_text;
    }
}
function processSubmission($entry)
{
    // Submission id
    global $dbSubmissionId;
    $dbSubmissionId = $entry['id'];

    // Submission type
    global $dbSubmissionType;

    if ($entry['1']) {
        if (strpos(strtolower($entry['1']), 'individu') !== false) {
            $dbSubmissionType = 'individu';
        } else if (strpos(strtolower($entry['1']), 'groep') !== false) {
            $dbSubmissionType = 'groep';
        } else {
            $dbSubmissionType = 'geen';
        }
    }

    global $dbSubmissionDate;
    $dbSubmissionDate = date("Y-m-d H:i:s");

    global $dbSubmissionOrganization;
    $dbSubmissionOrganization = $entry['16'];

    global $dbNumberParkingTickets;
    $dbNumberParkingTickets = 0;

    if ($dbSubmissionType == 'groep') {
        if (!empty($entry[27])) {
            $dbNumberParkingTickets = $entry[27];
        }
    } else if ($dbSubmissionType == 'individu') {
        if (!empty($entry[22]) && $entry[22] == 'Ja') {
            $dbNumberParkingTickets = 1;
        } else {
            $dbNumberParkingTickets = 0;
        }
    }

    global $dbReductionCode;
    if (!empty($entry[21])) {
        $dbReductionCode = strtolower(trim($entry[21]));
    } else {
        $dbReductionCode = '';
    }

    global $dbNotes;
    $dbNotes = $entry['23'];

    global $dbExpirationDate;
    global $dbInvoiceExpirationDays;
    $dbExpirationDate = date('Y-m-d H:i:s', strtotime("+" . $dbInvoiceExpirationDays . " days"));
}

function processInvoiceNAWFields($entry)
{
    global $dbInvoiceFirstName;
    $dbInvoiceFirstName = $entry['17.3'];

    global $dbInvoiceLastName;
    $dbInvoiceLastName = $entry['17.6'];

    global $dbInvoiceAdress;
    $dbInvoiceAdress = $entry['18.1'];

    global $dbInvoiceZipcode;
    $dbInvoiceZipcode = $entry['18.3'];

    global $dbInvoiceCity;
    $dbInvoiceCity = $entry['18.5'];

    global $dbInvoiceEmail;
    $dbInvoiceEmail = $entry['19'];

    global $dbInvoiceExtraInformation;
    $dbInvoiceExtraInformation = $entry['20'];

    global $dbInvoiceEventNr;
    $dbInvoiceEventNr = '8000';
}

function processInvoicePaymentFields($entry)
{
    global $wpdb;
    $count = $wpdb->get_var("SELECT COUNT(*) FROM " . $wpdb->prefix . "submissions");

    $invoice_count = $count + 1;
    $invoice_cost_post = 'HGKF18';

    global $dbInvoiceFollowNumber;
    $dbInvoiceFollowNumber = '2018' . str_pad($invoice_count, 4, "0", STR_PAD_LEFT);

    global $dbInvoiceNumber;
    $dbInvoiceNumber = $invoice_cost_post . $dbInvoiceFollowNumber;

    global $dbInvoiceDebiteurNr;
    $dbInvoiceDebiteurNr = $invoice_count + 1600;

    global $dbInvoiceBookNr;
    $dbInvoiceBookNr = '71';

    global $dbInvoiceCostPost;
    $dbInvoiceCostPost = $invoice_cost_post;

    global $dbInvoiceBtwType;
    $dbInvoiceBtwType = '2';

    global $dbInvoiceDescription;
    $dbInvoiceDescription = 'Deelname Het Grootste Kennisfestival';

    global $dbInvoiceRowDescription;
    $dbInvoiceRowDescription = 'Deelname Het Grootste Kennisfestival';
}

function processParticipants($entry, $form) {
    global $dbParticipants;
    $dbParticipants = [];
    // The main participant is the non repeater participant
    $mainParticipant = [];

    if (!empty($entry['15.3']) && !empty($entry['15.6'])) {
        $mainParticipant['Naam'] = $entry['15.3'] . " " . $entry['15.6'];
    }
    if (!empty($entry[13])) {
        $mainParticipant['E-mailadres'] = $entry[13];
    }
    $dbParticipants[] = $mainParticipant;

    // Search for repeater fields and loop through the repeater field -> 'Meer deelnemers toevoegen'
    $repeaterID = '';
    foreach ($form['fields'] as $key => $formField) {
        if (get_class($formField) == 'GF_Field_Repeater') {
            if ($formField[label] == 'deelnemers-repeater') {
                $repeaterID = $formField[id];
            }
        }
    }

    // SEARCH THROUGH ENTRY FOR THE FIELD ID OF THE REPEATER
    foreach ($entry as $key => $formEntry) {
        // Check if the field is the repeater field
        if ($key == $repeaterID) {
            // Breakdown the repeater's inputs. us = un-serialized.
            $usEntry = unserialize($formEntry);
        }
    }

    foreach ($usEntry as $keyOneEntry => $oneEntry) {
        $participant = array();
        // MATCH UP THE FIELDS AND INPUTS
        $singleRepeat = '';
        foreach ($form[fields] as $key => $formField) {
            $fieldId = $formField[id];
            if (array_key_exists($fieldId, $oneEntry)) {
                $singleInput = implode(" ", $oneEntry[$fieldId]);
                // Only include inputs that aren't empty
                if (!empty($singleInput)) {
                    $participant[$formField[label]] = $singleInput;
                    $singleRepeat .= $formField[label] . ": " . $singleInput . ", ";
                }
            }
        }
        $dbParticipants[] = $participant;

        array_push($repeats, $singleRepeat);
        unset($singleRepeat);
    }
}

function processPaymentFields($entry)
{
    // Calculate price of a ticket
    global $dbTicketPrice;

    global $dbSubmissionType;
    global $price_single_ticket;
    global $price_group_ticket;
    if ($dbSubmissionType == 'groep') {
        $dbTicketPrice = $price_group_ticket;
    } else if ($dbSubmissionType == 'individu') {
        $dbTicketPrice = $price_single_ticket;
    }

    // Check for reduction and change the ticket price
    global $dbReductionCode;
    $freeParkingTicket = false;
    if ($dbReductionCode && $dbReductionCode != '') {
        global $wpdb;
        $sql = "SELECT * FROM " . $wpdb->prefix . "submissions_reduction_codes where code = '" . $dbReductionCode . "'";

        $result = $wpdb->get_results($sql, 'ARRAY_A');

        if (count($result) > 0) {
            $dbTicketPrice = $result[0]['ticket_price'];
            $freeParkingTicket = $result[0]['free_parking_ticket'] == 1 ? true : false;
        }
    }

    // Calculate parking costs and add to the ticketprice
    global $dbNumberParkingTickets;
    // Calculate high btw first substract the food (low btw) and split into parking ticket and ticket
    global $dbPricePartHigh;
    global $dbPricePartHighBtw;
    global $price_parking_ticket;
    global $btw_high;

    $total_price_parkingtickets = 0;
    if ($dbNumberParkingTickets > 0) {
        // Parking costs and btw
        $total_price_parkingtickets = ($dbNumberParkingTickets * $price_parking_ticket);
        $price_parkingtickets_btw = $total_price_parkingtickets  * $btw_high;
        $price_parkingtickets_total = $total_price_parkingtickets  + $price_parkingtickets_btw;
    }

    global $food_price;
    $price_ticket_ex_food = $dbTicketPrice - $food_price;

    // If there is a reduction price which is smaller than the food price the price part high will be below zero
    if ($price_ticket_ex_food < 0) {
        $price_ticket_ex_food = 0;
    }

    global $dbParticipants;
    $participants_price_tickets = $price_ticket_ex_food * count($dbParticipants);

    $dbPricePartHigh = $participants_price_tickets + $total_price_parkingtickets ;
    $dbPricePartHighBtw = $dbPricePartHigh * $btw_high;

    global $dbPricePartHighTotal;
    $dbPricePartHighTotal = $dbPricePartHigh + $dbPricePartHighBtw;

    // Calculate low btw
    // When the reduction price is smaller than the food price take the reduction price
    global $dbPricePartLow;
    $dbPricePartLow = $food_price;
    if ($dbTicketPrice < $food_price) {
        $dbPricePartLow = $dbTicketPrice;
    }

    global $dbPricePartLowBtw;
    global $dbPricePartLowTotal;
    global $btw_low;

    $dbPricePartLow = count($dbParticipants) * $dbPricePartLow;
    $dbPricePartLowBtw = $dbPricePartLow * $btw_low;
    $dbPricePartLowTotal = $dbPricePartLow + $dbPricePartLowBtw;

    // Payment details
    global $dbTotalBtw;
    $dbTotalBtw = $dbPricePartLowBtw + $dbPricePartHighBtw;
    global $dbTotalPrice;
    $dbTotalPrice = ($dbTicketPrice * count($dbParticipants)) + $total_price_parkingtickets;

    $rounded_total_price = number_format($dbTotalPrice * 100, 0, ',', '');
    $rounded_btw_part_low = number_format(($dbPricePartLowBtw) * 100, 0, ',', '');
    $rounded_btw_part_high = number_format(($dbPricePartHighBtw) * 100, 0, ',', '');

    global $dbTotalPriceBtw;
    $dbTotalPriceBtw = ($rounded_total_price + $rounded_btw_part_low + $rounded_btw_part_high) / 100;
}

function saveSubmission()
{
    global $dbSubmissionId;
    global $dbSubmissionType;
    global $dbSubmissionDate;
    global $dbSubmissionOrganization;
    global $dbNumberParkingTickets;
    global $dbInvoiceFirstName;
    global $dbInvoiceLastName;
    global $dbInvoiceAdress;
    global $dbInvoiceZipcode;
    global $dbInvoiceCity;
    global $dbInvoiceEmail;
    global $dbInvoiceExtraInformation;
    global $dbInvoiceEventNr;
    global $dbInvoiceNumber;
    global $dbInvoiceDebiteurNr;
    global $dbInvoiceBookNr;
    global $dbInvoiceCostPost;
    global $dbInvoiceExpirationDays;
    global $dbInvoiceBtwType;
    global $dbInvoiceDescription;
    global $dbInvoiceRowDescription;
    global $dbReductionCode;
    global $dbNotes;
    global $dbInvoiceFollowNumber;
    global $dbExpirationDate;
    global $dbTotalPriceBtw;
    global $dbTotalPrice;
    global $dbTotalBtw;

    global $wpdb;

    debug_to_console('Table: ' . db_submission_table);
    $wpdb->insert(db_submission_table,
        array(
            'submission_id' => $dbSubmissionId,
            'invoice_debiteur_nr' => $dbInvoiceDebiteurNr,
            'invoice_number' => $dbInvoiceNumber,
            'invoice_book_nr' => $dbInvoiceBookNr,
            'invoice_cost_post' => $dbInvoiceCostPost,
            'invoice_description' => $dbInvoiceDescription,
            'invoice_row_description' => $dbInvoiceRowDescription,
            'invoice_follow_nr' => $dbInvoiceFollowNumber,
            'submission_type' => $dbSubmissionType,
            'submission_date' => $dbSubmissionDate,
            'invoice_expiration_days' => $dbInvoiceExpirationDays,
            'expiration_date' => $dbExpirationDate,
            'organization' => $dbSubmissionOrganization,
            'invoice_firstname' => $dbInvoiceFirstName,
            'invoice_lastname' => $dbInvoiceLastName,
            'invoice_adress' => $dbInvoiceAdress,
            'invoice_zipcode' => $dbInvoiceZipcode,
            'invoice_city' => $dbInvoiceCity,
            'invoice_event_nr' => $dbInvoiceEventNr,
            'price' => $dbTotalPrice,
            'invoice_btw_type' => $dbInvoiceBtwType,
            'tax' => $dbTotalBtw,
            'price_tax' => $dbTotalPriceBtw,
            'invoice_email' => $dbInvoiceEmail,
            'invoice_extra_information' => $dbInvoiceExtraInformation,
            'parking_tickets' => $dbNumberParkingTickets,
            'reduction_code' => $dbReductionCode,
            'notes' => $dbNotes
        )
    );

    // First payment detail: insert the entree payment detail row (with btw high)
    global $dbPricePartHighTotal;
    global $dbPricePartHigh;
    global $dbPricePartHighBtw;
    global $btw_high_nr;
    global $payment_detail_event_nr_high_btw;
    global $payment_detail_description_high_btw;

    $wpdb->insert($wpdb->prefix . 'submission_payment_details',
        array(
            'invoice_id' => $dbSubmissionId,
            'event' => $payment_detail_event_nr_high_btw,
            'price' => $dbPricePartHigh,
            'btw_type' => $btw_high_nr,
            'tax' => $dbPricePartHighBtw,
            'row_description' => $payment_detail_description_high_btw,
            'price_tax' => $dbPricePartHighTotal,
            'invoice_number' => $dbInvoiceNumber
        )
    );

    debug_to_console('Inserted btw high in payment details table');

    // Second payment detail: insert the food payment detail row (with btw low)
    global $dbPricePartLowBtw;
    global $dbPricePartLow;
    global $dbPricePartLowTotal;
    global $btw_low_nr;
    global $payment_detail_event_nr_low_btw;
    global $payment_detail_description_low_btw;

    $wpdb->insert($wpdb->prefix . 'submission_payment_details',
        array(
            'invoice_id' => $dbSubmissionId,
            'event' => $payment_detail_event_nr_low_btw,
            'price' => $dbPricePartLow,
            'btw_type' => $btw_low_nr,
            'tax' => $dbPricePartLowBtw,
            'row_description' => $payment_detail_description_low_btw,
            'price_tax' => $dbPricePartLowTotal,
            'invoice_number' => $dbInvoiceNumber
        )
    );

    debug_to_console('Inserted btw low in payment details table');

    global $dbParticipants;
    foreach ($dbParticipants as $part) {
        $wpdb->insert($wpdb->prefix . 'submission_participants',
            array(
                'invoice_id' => $dbSubmissionId,
                'name' => $part['Naam'],
                'email' => $part['E-mailadres']
            )
        );
    }

    debug_to_console('Inserted participants into participants table');
}

function debug_to_console($data)
{
    $output = $data;
    if (is_array($output))
        $output = implode(',', $output);

    echo "<script>console.log( 'Debug php: " . $output . "' );</script>";
}

?>